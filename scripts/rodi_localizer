#!/usr/bin/env python

import rospy
import tf
import numpy as np

def normalize_quat(q):    
    return q / np.linalg.norm(q)

def average_transformations(transformations):
    transformations = np.array(transformations)
    average_position = np.mean(transformations[:, 0:3], axis=0)
    average_orientation = transformations[0, 3:7]
    for n, orientation in enumerate(transformations[1:, 3:7]):
        if np.dot(orientation, orientation) < 0.0:
            orientation = -orientation
        average_orientation = normalize_quat((average_orientation + orientation) / (n + 1))
    return average_position, average_orientation

def get_world_frame(tracker):
    return 'world_from_{}_frame'.format(tracker)

def get_rodi_frame(tracker):
    return 'rodi_from_{}_frame'.format(tracker)

class RodiLocalizer(object):

    def __init__(self, rodi_trackers, rodi_frame, world_frame, update_rate):
        super(RodiLocalizer, self).__init__()
        self.tf_listener = tf.TransformListener()
        self.tf_broadcaster = tf.TransformBroadcaster()
        self.tracked_frames = [(get_world_frame(tracker), get_rodi_frame(tracker)) for tracker in rodi_trackers]
        self.world_frame = world_frame
        self.rodi_frame = rodi_frame
        self.update_rate = update_rate
    
    def run(self):
        r = rospy.Rate(self.update_rate)
        while not rospy.is_shutdown():
            try:                
                available_tracked_frames = []
                for world_frame, rodi_frame in self.tracked_frames:
                    try:
                        available_tracked_frames.append((world_frame, rodi_frame, self.tf_listener.getLatestCommonTime(world_frame, rodi_frame)))
                    except tf.Exception:
                        pass
                if available_tracked_frames:
                    stamp = min([stamp for _, _, stamp in available_tracked_frames])
                    transformations = []
                    for world_frame, rodi_frame, _ in available_tracked_frames:
                        (x, y, z), (qx, qy, qz, qw) =  self.tf_listener.lookupTransform(world_frame, rodi_frame, stamp)
                        transformations.append(np.array([x, y, z, qx, qy, qz, qw]))
                    average_position, average_orientation = average_transformations(transformations)
                    self.tf_broadcaster.sendTransform(average_position, average_orientation, stamp, self.rodi_frame, self.world_frame)
            except (tf.Exception, tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                pass
            r.sleep()

if __name__ == '__main__':
    rospy.init_node('rodi_localizer')

    rodi_trackers = rospy.get_param("~rodi_trackers")
    world_frame = rospy.get_param("~world_frame", "world")
    rodi_frame = rospy.get_param("~rodi_frame", "rodi")
    update_rate = rospy.get_param("~update_rate", 10.0)
    
    rodi = RodiLocalizer(rodi_trackers,  rodi_frame, world_frame, update_rate)
    try:
        rodi.run()
    except rospy.ROSInterruptException:
        pass
