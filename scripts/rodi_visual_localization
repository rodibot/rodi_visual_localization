#!/usr/bin/env python
import rospy
import tf
from geometry_msgs.msg import PoseArray


class RodiVisualLocalization(object):

        def __init__(self, camera_frame, odom_frame, base_frame):
            self.first_position = self.first_orientation = None
            rospy.Subscriber("tag_detections_pose", PoseArray, self.pose_callback)
            self.pose_br = tf.TransformBroadcaster()
            self.camera_frame = camera_frame
            self.odom_frame = odom_frame
            self.base_frame = base_frame

        def pose_callback(self, data):
            if not data.poses:
                return
            position = data.poses[0].position.x, data.poses[0].position.y, data.poses[0].position.z
            orientation = data.poses[0].orientation.x, data.poses[0].orientation.y, data.poses[0].orientation.z, data.poses[0].orientation.w
            
            if not self.first_position:
                self.first_position = position
                self.first_orientation = orientation                
            else:
                self.pose_br.sendTransform(self.first_position,
                                           self.first_orientation,
                                           rospy.Time.now(),
                                           self.odom_frame,
                                           self.camera_frame)
                self.pose_br.sendTransform(position,
                                           orientation,
                                           rospy.Time.now(),
                                           self.base_frame,
                                           self.camera_frame)

        def run(self):
            rospy.spin()

if __name__ == '__main__':
    rospy.init_node('rodi_visual_localization')
    camera_frame = rospy.get_param("~camera_frame", "camera_frame")
    base_frame = rospy.get_param("~base_frame", "base_link")
    odom_frame = rospy.get_param("~odom_frame", "odom")
    
    rodi = RodiVisualLocalization(camera_frame, odom_frame, base_frame)
    rodi.run()
